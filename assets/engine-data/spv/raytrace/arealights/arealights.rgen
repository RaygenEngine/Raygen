#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query: require
// TODO:
#define RAY
#include "global.glsl"

#include "global-descset.glsl"

#include "random.glsl"
#include "surface.glsl"

struct ShadowPayload
{
	// area light with this id
	int id; 
	// t_hit - usefull for area lights that we don't know their position
	float dist;
	// true - there is visibility to our light
	bool hit; 
};

layout(push_constant) uniform PC
{
	int frame;
	int samples;
	int quadlightCount;
};

layout(location = 0) rayPayloadEXT ShadowPayload prd;

layout(set = 1, binding = 0, rgba32f) uniform image2D image;
layout(set = 1, binding = 1, rgba32f) uniform image2D progressiveResult;
layout(set = 1, binding = 2, rgba32f) uniform image2D momentsBuffer;
layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAs;
layout(set = 4, binding = 0, std430) readonly buffer Quadlights { Quadlight light[]; } quadlights;

bool PtLights_ShadowRayTest(accelerationStructureEXT topLevelAs, int id, vec3 origin, vec3 direction, float tMin, float tMax)
{ 
	prd.hit = false;
	prd.id = id;
	prd.dist = 0.0;

    uint  rayFlags =  gl_RayFlagsCullFrontFacingTrianglesEXT;

	// trace ray
	traceRayEXT(topLevelAs,     // acceleration structure
				rayFlags,       // rayFlags
				0xFF,           // cullMask - quadlights
				0,              // sbtRecordOffset - shadow shaders offset
				0,              // sbtRecordStride
				0,              // shadow missIndex
				origin,         // ray origin
				tMin,           // ray min range
				direction,      // ray direction
				tMax,           // ray max range
				0               // payload (location = 0)
	);

	return prd.hit;
}

void Quadlight_SampleLi(accelerationStructureEXT topLevelAs, Quadlight ql, int areaLightId, inout Surface surface, out float pdf_light, inout uint seed)
{
	pdf_light = 0;

	vec2 u = rand2(seed) * 2 - 1;
	u.x *= ql.width / 2.f;
	u.y *= ql.height / 2.f;

	vec3 samplePoint =  ql.center + u.x * ql.right + u.y * ql.up;

	vec3 L = normalize(samplePoint - surface.position);

	float cosTheta_o = dot(ql.normal, -L);

	if (cosTheta_o < BIAS) {
		return;
	}

	cosTheta_o = abs(cosTheta_o);

	addOutgoingDir(surface, L);

	if(isOutgoingDirPassingThrough(surface)) {
		return;
	}

	float dist = distance(samplePoint, surface.position);
	if(!PtLights_ShadowRayTest(topLevelAs, areaLightId, surface.position, L, 0.001, INF)) {
		return;
	}

	// pdfw = pdfA / (cosTheta_o / r^2) = r^2 * pdfA / cosTheta_o
	pdf_light = (dist * dist) / (ql.width * ql.height * cosTheta_o);
}

float Quadlight_EstimateDirect(accelerationStructureEXT topLevelAs, Quadlight ql, int areaLightId, Surface surface, inout uint seed)
{
	float pdf_light;
	Quadlight_SampleLi(topLevelAs, ql, areaLightId, surface, pdf_light, seed);

	if(pdf_light >= BIAS){
		return absNdot(surface.o) / pdf_light; 
	}

	return 0.0;
}

struct ReprojectionData {
	vec3 color;
	vec2 moments;
	float historyLength; // 0 means reprojection was invalid
};

ReprojectionData GetReprojection(vec2 uv);


void main() {
	vec2 uv = (vec2(gl_LaunchIDEXT.xy) + vec2(0.5)) / vec2(gl_LaunchSizeEXT.xy);

	float depth = texture(g_DepthSampler, uv).r;

	if(depth == 1.0) {
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(0.0, 0.0, 0.0, 0.0));
		return; 
	}

	Surface surface = surfaceFromGBuffer(
	    cam,
		depth,
	    g_SNormalSampler,
		g_GNormalSampler,
		g_AlbedoSampler,
		g_SpecularSampler,
		g_EmissiveSampler,
		uv
	);

	uint seed = tea16(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, frame);

	vec4 val = vec4(0);
	for(int s = 0; s < samples; ++s) {
		for(int i = 0; i < quadlightCount; ++i) {
			Quadlight ql = quadlights.light[i];
			val[i] += Quadlight_EstimateDirect(topLevelAs, ql, i, surface, seed);
		}
	}

	vec3 color = val.rgb / float(samples);


	ReprojectionData reproj = GetReprojection(uv);
	bool success = reproj.historyLength > 0;
	float historyLength = min(32.0f, success ? reproj.historyLength + 1.0f : 1.0f);

	vec2 moments;
	moments.r = luminance(color);
	moments.g = moments.r * moments.r;

	// Mix reprojection
	
	#define minColorAlpha 0.05
	#define minMomentsAlpha 0.05

	const float colorAlpha = success ? max(1.0 / historyLength, minColorAlpha) : 1.0;
	const float momentsAlpha = success ? max(1.0 / historyLength, minMomentsAlpha) : 1.0;

	moments = mix(reproj.moments, moments, momentsAlpha);
	color = mix(reproj.color, color, colorAlpha);
	

	// from SVGF paper:
	float variance = max(0., moments.g - moments.r * moments.r);

	if (historyLength < 2) {
		variance += 0.2;
	}

	imageStore(progressiveResult, ivec2(gl_LaunchIDEXT.xy), vec4(color, variance));
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, variance));

	imageStore(momentsBuffer, ivec2(gl_LaunchIDEXT.xy), vec4(moments, depth, historyLength));
}

//
//  PRE PROCESS (reproject)
//

bool IsReprojValid(ivec2 coord, float expectedPrevDepth, vec4 centerUvDrawIndex, out vec4 momentsSample)
{
	if (coord.x < 0 || coord.y < 0 || 
	    coord.x >= gl_LaunchSizeEXT.x || coord.y > gl_LaunchSizeEXT.y) {
		return false;
	}

	momentsSample = imageLoad(momentsBuffer, coord);
	if (abs(expectedPrevDepth - momentsSample.z) > 5e-3) {
		return false;
	}

	vec4 thisUvDrawIndex = texelFetch(g_UVDrawIndexSampler, coord, 0);
	if (abs(thisUvDrawIndex.z - centerUvDrawIndex.z) > 0.5) {
		return false;
	}

	return true;
}


ReprojectionData ReprojSample(vec2 sampleUv, vec4 centerUvDrawIndex, float expectedPrevDepth)
{
	ivec2 pixelPos = ivec2(floor(sampleUv));
	ivec2 offset[4] = { ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1) };

	float x = fract(sampleUv.x);
	float y = fract(sampleUv.y);

	float w[4] = { 
		(1 - x) * (1 - y),
		      x * (1 - y),
		(1 - x) * y,
		      x * y 
	};

	vec4 color = vec4(0);
	vec4 moments = vec4(0);
	float sumW = 0;
	
	for (int sampleIdx = 0; sampleIdx < 4; sampleIdx++) {
		ivec2 loc = pixelPos + offset[sampleIdx];
		vec4 momentsSample;
		if (IsReprojValid(loc, expectedPrevDepth, centerUvDrawIndex, momentsSample)) {
			color += w[sampleIdx] * imageLoad(progressiveResult, loc);
			moments += w[sampleIdx] * momentsSample;
			sumW += w[sampleIdx];
		}
	}


	// This "valid" check should probably have min bias
	if (sumW > 0) {
		color /= sumW;
		moments /= sumW;
	}

	ReprojectionData reproj;
	reproj.color = color.rgb;
	reproj.moments = moments.rg;

	reproj.historyLength = moments.a;
	return reproj;
}

ReprojectionData GetReprojection(vec2 uv) {
	// PERF:
	if (frame < 1) {
		ReprojectionData repr;
		repr.color = vec3(0);
		repr.moments = vec2(0);
		repr.historyLength = 0;
		return repr;
	}

	// xy: ScreenSpace (uv) motion vector
	// z: expected previous depth
	const vec4 motionSample = texture(g_VelocitySampler, uv);

	const vec2 motion = motionSample.xy;
	const float expectedDepth = motionSample.z;

	const vec2 posPrev = vec2(gl_LaunchIDEXT.xy) + vec2(motion * gl_LaunchSizeEXT.xy) ;

	const vec4 centerUvDrawIndex = texelFetch(g_UVDrawIndexSampler, ivec2(gl_LaunchIDEXT.xy), 0);

	return ReprojSample(posPrev, centerUvDrawIndex, expectedDepth);
}
