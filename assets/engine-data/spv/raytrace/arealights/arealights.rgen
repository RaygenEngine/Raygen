#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query: require
// TODO:
#define RAY
#include "global.glsl"

#include "global-descset.glsl"



#include "lights/quadlight.glsl"
#include "random.glsl"
#include "surface.glsl"

struct hitPayload
{
	int shadow;
};

layout(push_constant) uniform PC
{
	int pointlightCount;
	int quadlightCount;
};

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 1, binding = 0, rgba32f) uniform image2D image;
layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAs;
layout(set = 3, binding = 0, std430) readonly buffer Quadlights { Quadlight light[]; } quadlights;

void main() {
	vec2 uv = (vec2(gl_LaunchIDEXT.xy) + vec2(0.5)) / vec2(gl_LaunchSizeEXT.xy);

	Surface surface = surfaceFromGBuffer(
	    cam,
		g_DepthSampler,
		g_NormalSampler,
		g_AlbedoSampler,
		g_SpecularSampler,
		g_EmissiveSampler,
		uv
	);

	vec3 color = vec3(0);

	for(int i = 0; i < quadlightCount; ++i) {
		Quadlight ql = quadlights.light[i];
		color += Quadlight_SmoothContribution(topLevelAs, ql, surface);
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.f));
}
