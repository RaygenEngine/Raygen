#include "global-descset.glsl"

#include "random.glsl"
#include "surface.glsl"

struct ShadowPayload
{
	// area light with this id
	int id; 
	// t_hit - useful for area lights that we don't know their position
	float dist;
	// true - there is visibility to our light
	bool hit; 
};

layout(push_constant) uniform PC
{
	int frame;
	int samples;
	int quadlightCount;
};

layout(location = 0) rayPayloadEXT ShadowPayload prd;

layout(set = 1, binding = 0, rgba32f) uniform image2D image;
layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAs;
layout(set = 4, binding = 0, std430) readonly buffer Quadlights { Quadlight light[]; } quadlights;

float Arealight_EstimateDirect(accelerationStructureEXT topLevelAs, Quadlight ql, int areaLightId, Surface surface, inout uint seed);

void main() {
	vec2 uv = (vec2(gl_LaunchIDEXT.xy) + vec2(0.5)) / vec2(gl_LaunchSizeEXT.xy);

	float depth = texture(g_DepthSampler, uv).r;

	if(depth == 1.0) {
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(0.0));
		return; 
	}

	Surface surface = surfaceFromGBufferNoMaterial(
	    cam,
		depth,
	    g_SNormalSampler,
		g_GNormalSampler,
		uv
	);

	uint seed = tea16(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, frame);

	vec3 val = vec3(0);
	for(int s = 0; s < samples; ++s) {
		for(int i = 0; i < min(3, quadlightCount); ++i) {

			Quadlight ql = quadlights.light[i];
			val[i] += Arealight_EstimateDirect(topLevelAs, ql, i, surface, seed);
		}
	}

	vec3 color = val / float(samples);
	
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.f));
}

bool PtLights_ShadowRayTest(accelerationStructureEXT topLevelAs, int id, vec3 origin, vec3 direction, float tMin, float tMax)
{ 
	prd.hit = false;
	prd.id = id;
	prd.dist = 0.0;

    uint  rayFlags =  gl_RayFlagsCullFrontFacingTrianglesEXT;

	// trace ray
	traceRayEXT(topLevelAs,     // acceleration structure
				rayFlags,       // rayFlags
				0xFF,           // cullMask - none
				0,              // sbtRecordOffset - shadow shaders offset
				0,              // sbtRecordStride
				0,              // shadow missIndex
				origin,         // ray origin
				tMin,           // ray min range
				direction,      // ray direction
				tMax,           // ray max range
				0               // payload (location = 0)
	);

	return prd.hit;
}

void Arealight_SampleLi(accelerationStructureEXT topLevelAs, Quadlight ql, int areaLightId, inout Surface surface, out float pdf_light, inout uint seed)
{
	pdf_light = 0;

	vec2 u = rand2(seed) * 2 - 1;
	u.x *= ql.width / 2.f;
	u.y *= ql.height / 2.f;

	vec3 samplePoint =  ql.center + u.x * ql.right + u.y * ql.up;

	vec3 L = normalize(samplePoint - surface.position);

	float cosTheta_o = dot(ql.normal, -L);

	if (cosTheta_o < ql.cosAperture) {
		return;
	}

	cosTheta_o = abs(cosTheta_o);

	addOutgoingDir(surface, L);

	if(isOutgoingDirPassingThrough(surface)) {
		return;
	}

	float dist = distance(samplePoint, surface.position);
	if(!PtLights_ShadowRayTest(topLevelAs, areaLightId, surface.position, L, 0.001, INF)) {
		return;
	}

	// pdfw = pdfA / (cosTheta_o / r^2) = r^2 * pdfA / cosTheta_o
	pdf_light = (dist * dist) / (ql.width * ql.height * cosTheta_o);
}

float Arealight_EstimateDirect(accelerationStructureEXT topLevelAs, Quadlight ql, int areaLightId, Surface surface, inout uint seed)
{
	float pdf_light;
	Arealight_SampleLi(topLevelAs, ql, areaLightId, surface, pdf_light, seed);

	if(pdf_light >= BIAS){
		return absNdot(surface.o) / pdf_light; 
	}

	return 0.0;
}
