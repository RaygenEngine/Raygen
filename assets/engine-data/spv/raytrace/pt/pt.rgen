#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require

#include "global.glsl"
#include "raytrace/pt/pt.glsl"

#include "random.glsl"

layout(set = 0, binding = 0, rgba32f) uniform image2D image;
layout(set = 1, binding = 0) uniform accelerationStructureEXT topLevelAs;

layout(location = 0) rayPayloadEXT hitPayload prd;

vec3 RadianceOfRay(vec3 nextOrigin, vec3 nextDirection) {
	prd.radiance = vec3(0);
	prd.depth += 1;

    uint  rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsCullFrontFacingTrianglesEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

	// trace ray
	traceRayEXT(topLevelAs,     // acceleration structure
				rayFlags,       // rayFlags
				0xFF,           // cullMask
				0,              // sbtRecordOffset
				0,              // sbtRecordStride
				0,              // missIndex
				nextOrigin,     // ray origin
				tMin,           // ray min range
				nextDirection,  // ray direction
				tMax,           // ray max range
				0               // payload (location = 0)
	);
	
    prd.depth -= 1;
	return prd.radiance;
}

void main() {
	vec2 uv = (vec2(gl_LaunchIDEXT.xy) + vec2(0.5)) / vec2(gl_LaunchSizeEXT.xy);

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2       d           = inUV * 2.0 - 1.0;

	vec4 origin    = viewInverse * vec4(0, 0, 0, 1);
	vec4 target    = projInverse * vec4(d.x, d.y, 1, 1);
	vec4 direction = viewInverse * vec4(normalize(target.xyz), 0);

	origin = origin + innerRadius * direction;

	vec3 accumColor = vec3(0.f);
	uint actualSamples = 1024u;
	uint bounces = 3;
	for(uint smpl = 0; smpl < actualSamples; ++smpl){
		prd.seed = tea16(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, actualSamples + smpl);
		prd.depth = 1; // gbuffer 
		prd.accumThroughput = vec3(1.f);

		accumColor += RadianceOfRay(origin.xyz, direction.xyz);	 
	}

	vec3 curColor = (accumColor / actualSamples);

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(curColor, 1.0));
}
