#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_buffer_reference2 : enable

#include "global.glsl"
#include "ao.glsl"

#include "attachments.glsl"
#include "fragment.glsl"
#include "onb.glsl"
#include "bsdf.glsl"
#include "sampling.glsl"
#include "random.glsl"

layout(set = 1, binding = 0) uniform UBO_Camera {   
	vec3 position;
	float pad0;
	mat4 view;
	mat4 proj;
	mat4 viewProj;
	mat4 viewInv;
	mat4 projInv;
	mat4 viewProjInv; 
} cam;

layout(set = 2, binding = 0, rgba32f) uniform image2D image;
layout(set = 3, binding = 0) uniform accelerationStructureEXT topLevelAs;


layout(location = 0) rayPayloadEXT hitPayload prd;

float RadianceOfRay2(vec3 nextOrigin, vec3 nextDirection) {

    uint  rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsCullFrontFacingTrianglesEXT;
    float tMin     = 0.001;
    float tMax     = 2.0; // SMATH:

	// trace ray
	traceRayEXT(topLevelAs,     // acceleration structure
				rayFlags,       // rayFlags
				0xFF,           // cullMask
				0,              // sbtRecordOffset
				0,              // sbtRecordStride
				0,              // missIndex
				nextOrigin,     // ray origin
				tMin,           // ray min range
				nextDirection,  // ray direction
				tMax,           // ray max range
				0               // payload (location = 0)
	);

	return prd.md;
}

void main() {
	vec2 uv = (vec2(gl_LaunchIDEXT.xy) + vec2(0.5)) / vec2(gl_LaunchSizeEXT.xy);

	float fragDepth = texture(g_DepthSampler, uv).r;
	// PERF:
	Fragment frag = getFragmentFromGBuffer(
		fragDepth,
		cam.viewProjInv,
		g_NormalSampler,
		g_AlbedoSampler,
		g_SpecularSampler,
		g_EmissiveSampler,
		uv);

	Onb orthoBasis = branchlessOnb(frag.normal);

	vec3 color = vec3(0);
	for(uint smpl = 0; smpl < samples; ++smpl){
		uint seed = tea16(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, samples + smpl);

		vec2 u = rand2(seed); 
		vec3 L = uniformSampleHemisphere(u);

		outOnbSpace(orthoBasis, L);
		color += vec3(RadianceOfRay2(frag.position, L)); // just visibility
	}
	
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color / samples, 1.0));
}
