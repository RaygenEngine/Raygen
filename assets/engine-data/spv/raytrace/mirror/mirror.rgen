#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_buffer_reference2 : enable
// TODO:
#define RAY
#include "global.glsl"

#include "global-descset.glsl"

#include "onb.glsl"
#include "shading-math.glsl"
#include "surface.glsl"

struct hitPayload
{
	vec3 radiance;

	vec3 origin;
	vec3 direction;
	vec3 attenuation;

	bool done;
};

layout(push_constant) uniform PC
{
	int depth;
	int pointlightCount;
	int spotlightCount;
	int dirlightCount;
	int irragridCount;
	int quadlightCount;
};

layout(set = 1, binding = 0, rgba32f) uniform image2D image;
layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAs;

layout(location = 0) rayPayloadEXT hitPayload prd;

void TraceRay() {
	prd.radiance = vec3(0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsCullFrontFacingTrianglesEXT;
    float tMin     = 0.01;
    float tMax     = 10000.0;

	// trace ray
	traceRayEXT(topLevelAs,     // acceleration structure
				rayFlags,       // rayFlags
				0xFF,           // cullMask
				0,              // sbtRecordOffset
				0,              // sbtRecordStride
				0,              // missIndex
				prd.origin,     // ray origin
				tMin,           // ray min range
				prd.direction,  // ray direction
				tMax,           // ray max range
				0               // payload (location = 0)
	);
}

void main() {
	vec2 uv = (vec2(gl_LaunchIDEXT.xy) + vec2(0.5)) / vec2(gl_LaunchSizeEXT.xy);

	Surface surface = surfaceFromGBuffer(
	    cam,
		g_DepthSampler,
		g_NormalSampler,
		g_AlbedoSampler,
		g_SpecularSampler,
		g_EmissiveSampler,
		uv
	);
		

	if(surface.depth == 1.0 || surface.a >= SPEC_THRESHOLD) {
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(0.0, 0.0, 0.0, 1.0));
		return; 
	}

	prd.attenuation = vec3(sampleSpecularBRDF(surface));
	prd.attenuation *= absNdot(surface.o);

	vec3 L = getOutgoingDir(surface);
	prd.origin = surface.position;
	prd.direction = L;

	prd.done = false;

	vec3 accumColor = vec3(0);
	vec3 currentTotalAttenuation = vec3(1.0);
	for(int i = 0; i < depth && !prd.done; ++i)
	{
		currentTotalAttenuation *= prd.attenuation;

		TraceRay(); 

		accumColor += prd.radiance * currentTotalAttenuation;
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(accumColor, 1.f));
	
	// PERF: you can calculate reflection UVs here and use them later for ssr and skip some rays here
}
