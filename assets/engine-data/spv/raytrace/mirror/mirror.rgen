#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_buffer_reference2 : enable

#include "global.glsl"
#include "mirror.glsl"

#include "attachments.glsl"
#include "fragment.glsl"
#include "onb.glsl"
#include "bsdf.glsl"

layout(set = 1, binding = 0) uniform UBO_Camera {   
	vec3 position;
	float pad0;
	mat4 view;
	mat4 proj;
	mat4 viewProj;
	mat4 viewInv;
	mat4 projInv;
	mat4 viewProjInv; 
} cam;

layout(set = 2, binding = 0, rgba32f) uniform image2D image;
layout(set = 3, binding = 0) uniform accelerationStructureEXT topLevelAs;

layout(set = 4, binding = 1) uniform sampler2D textureSamplers[];

layout(location = 0) rayPayloadEXT hitPayload prd;

vec3 RadianceOfRay2(vec3 nextOrigin, vec3 nextDirection) {
	prd.radiance = vec3(0);
	prd.depth += 1;

    uint  rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsCullFrontFacingTrianglesEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

	// trace ray
	traceRayEXT(topLevelAs,     // acceleration structure
				rayFlags,       // rayFlags
				0xFF,           // cullMask
				0,              // sbtRecordOffset
				0,              // sbtRecordStride
				0,              // missIndex
				nextOrigin,     // ray origin
				tMin,           // ray min range
				nextDirection,  // ray direction
				tMax,           // ray max range
				0               // payload (location = 0)
	);
	
    prd.depth -= 1;
	return prd.radiance;
}

void main() {
	vec2 uv = (vec2(gl_LaunchIDEXT.xy) + vec2(0.5)) / vec2(gl_LaunchSizeEXT.xy);

	float fragDepth = texture(g_DepthSampler, uv).r;

	Fragment frag = getFragmentFromGBuffer(
		fragDepth,
		cam.viewProjInv,
		g_NormalSampler,
		g_AlbedoSampler,
		g_SpecularSampler,
		g_EmissiveSampler,
		uv);

	// Extract SpaceInfo
	vec3 color = vec3(0);

	// specular
	if(frag.a < SPECULAR_THRESH){
		vec3 V = normalize(cam.position - frag.position);
		vec3 N = frag.normal;
		float NoV = max(dot(N, V), BIAS);

		vec3 brdfLUT = (texture(textureSamplers[nonuniformEXT(21)], vec2(NoV, frag.a))).rgb;

		vec3 L = normalize(reflect(-V, N));

		prd.depth = 1; // start from depth = 1 due to gbuffer
		prd.radiance = vec3(0);
		vec3 specularLight = RadianceOfRay2(frag.position, L);

		vec3 specular = specularLight * (frag.f0 * brdfLUT.x + brdfLUT.y);

		color += specular;
	}
	
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}
