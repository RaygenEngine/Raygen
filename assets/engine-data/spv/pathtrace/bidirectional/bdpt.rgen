#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require

#include "global.glsl"
#include "random.glsl"
#include "sampling.glsl"

#define MAX_LIGHTPATH_DEPTH 4 

struct LightPathVertex {
	vec3 position;
	vec3 normal;
	vec3 value; // attenuated light value
};

struct camera_hitPayload
{
	vec3 radiance; // radiance of traced ray

	vec3 origin; // next ray stuff
	vec3 direction;
	vec3 attenuation; 

	int hitType; 
	// 0 - direct
	// 1 - general
	// 2 - hits radiant surface \ stop
	uint seed;
	
	uint lightPathDepth;
	LightPathVertex lightpath[MAX_LIGHTPATH_DEPTH];
};

struct light_hitPayload
{
	vec3 origin; // next ray stuff
	vec3 direction;
	vec3 normal;
	vec3 attenuation;


	int hitType; 
	// 0 - continue
	// 1 - break;
	uint seed;
};

layout(push_constant) uniform PC
{
	int bounces;
	int frame;
	int pointlightCount;
	int spotlightCount;
	int dirlightCount;
	int quadlightCount;
};

layout(set = 0, binding = 0, rgba32f) uniform image2D image;
layout(set = 0, binding = 1, rgba32f) uniform image2D progressive;
layout(set = 1, binding = 0) uniform UBO_Camera { Camera cam; };
layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAs;
layout(set = 7, binding = 0, std430) readonly buffer Quadlights { Quadlight light[]; } quadlights;

layout(location = 0) rayPayloadEXT camera_hitPayload camera_prd;
layout(location = 1) rayPayloadEXT light_hitPayload light_prd;

void TraceLightRay() {
    uint  rayFlags =  gl_RayFlagsCullFrontFacingTrianglesEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

	// trace ray
	traceRayEXT(topLevelAs,     // acceleration structure
				rayFlags,       // rayFlags
				0xFE,           // cullMask - lights
				2,              // sbtRecordOffset
				0,              // sbtRecordStride
				1,              // missIndex
				light_prd.origin,     // ray origin
				tMin,                 // ray min range
				light_prd.direction,  // ray direction
				tMax,           // ray max range
				1               // payload (location = 1)
	);
}

void TraceCameraRay() {
	camera_prd.radiance = vec3(0.f);

    uint  rayFlags =  gl_RayFlagsCullFrontFacingTrianglesEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

	// trace ray
	traceRayEXT(topLevelAs,     // acceleration structure
				rayFlags,       // rayFlags
				0xFF,           // cullMask - nothing
				0,              // sbtRecordOffset
				0,              // sbtRecordStride
				0,              // missIndex
				camera_prd.origin,     // ray origin
				tMin,                  // ray min range
				camera_prd.direction,  // ray direction
				tMax,           // ray max range
				0               // payload (location = 0)
	);
}

bool RRTerminationCheck(inout vec3 totalAttenuation) {

	// work with total atten for now
	float p_spawn = max(max(totalAttenuation), 0.0);
	if(rand(camera_prd.seed) > p_spawn) {
		return true; 
	}

	totalAttenuation /= p_spawn;
	return false;
}



void main() {
	light_prd.seed = tea16(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, frame);
			
	// LIGHT PATH
	{
		// pick one of the lights
		int totalLights = quadlightCount;
		float u = rand(light_prd.seed);
		int i = int(floor(u * totalLights));
		float p_selectLight = 1.0 / float(totalLights); 

		Quadlight ql = quadlights.light[i];
		
		vec2 u2 = rand2(light_prd.seed) * 2 - 1;
		u2.x *= ql.width / 2.f;
		u2.y *= ql.height / 2.f;

		// pick origin on surface
		light_prd.origin =  ql.center + u2.x * ql.right + u2.y * ql.up;

		u2 = rand2(light_prd.seed);

		// random hemisphere direction
		vec3 v = uniformSampleHemisphere(u2); // WIP: biased at edges (see quadlight bias)
		light_prd.direction =

		vec3(ql.right.x * v.x + ql.up.x * v.y + ql.normal.x * v.z,
			 ql.right.y * v.x + ql.up.y * v.y + ql.normal.y * v.z,
			 ql.right.z * v.x + ql.up.z * v.y + ql.normal.z * v.z);


		vec3 radiance = ql.color * ql.intensity;

		light_prd.hitType = 0; // direct

		light_prd.normal = ql.normal;

		light_prd.attenuation = vec3(1.0) / uniformHemispherePdf();

		vec3 currentTotalAttenuation = vec3(1.0) / p_selectLight;

		int depth = 0;
		for(;depth < MAX_LIGHTPATH_DEPTH && light_prd.hitType != 1; ++depth) {
			
			camera_prd.lightpath[depth].position = light_prd.origin;
			camera_prd.lightpath[depth].normal = light_prd.normal;
			camera_prd.lightpath[depth].value = radiance * currentTotalAttenuation;

			if(depth < MAX_LIGHTPATH_DEPTH - 1) {
				currentTotalAttenuation *= light_prd.attenuation; // attenuates value of next vertex

				TraceLightRay(); // calculate next origin and normal and attenuation of 2 x next vertex
			}
		}
		
		camera_prd.lightPathDepth = depth + 1;
	}

	camera_prd.seed = light_prd.seed;

	vec3 accumColor = vec3(0.f);
	// CAMERA PATH
	{
		float r1 = rand(camera_prd.seed);
		float r2 = rand(camera_prd.seed);

		vec2 subpixel_jitter = frame == 0 ? vec2(0.0f, 0.0f) : vec2(r1 - 0.5f, r2 - 0.5f);

		const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + subpixel_jitter;
		const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
		vec2       d           = inUV * 2.0 - 1.0;

		vec4 origin    = cam.viewInv * vec4(0, 0, 0, 1);
		vec4 target    = cam.projInv * vec4(d.x, d.y, 1, 1);
		vec4 direction = cam.viewInv * vec4(normalize(target.xyz), 0);

		camera_prd.origin = origin.xyz;
		camera_prd.direction = direction.xyz;

		camera_prd.attenuation = vec3(1.f);

		camera_prd.hitType = 0; // direct

	
		vec3 currentTotalAttenuation = vec3(1);
		for(int depth = 0; depth < bounces + 1 && camera_prd.hitType != 2; ++depth) {

			currentTotalAttenuation *= camera_prd.attenuation;

			TraceCameraRay(); // WIP: MIS the pdf 

			accumColor += camera_prd.radiance * currentTotalAttenuation;

			if(RRTerminationCheck(currentTotalAttenuation)) {
				break;
			}
		}
	}

	// Do accumulation
	if(frame > 0) {
		float a = 1.0f / float(frame);
		vec3 old_color = imageLoad(progressive, ivec2(gl_LaunchIDEXT.xy)).xyz;
		accumColor = mix(old_color, accumColor, a);
	}
	
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(accumColor, 1.f));
	imageStore(progressive, ivec2(gl_LaunchIDEXT.xy), vec4(accumColor, 1.f));
}
