#include "onb.glsl"
#include "sampling.glsl"
#include "random.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

layout(push_constant) uniform PC {
	mat4 viewInv;
	mat4 projInv;
};

layout(set = 0, binding = 0, rgba32f) uniform image2D image;
layout(set = 1, binding = 0) uniform samplerCube envmapSampler;

vec3 envmapColorConvolution(vec3 dir) 
{
    // the sample direction equals the hemisphere's orientation 
    vec3 normal = normalize(dir); // dir to cubemap texel pos = actual sample dir
  
  	Onb nonb = branchlessOnb(normal);
  
    vec3 irradiance = vec3(0.0);
    
	const uint SAMPLE_COUNT = 4096u;
	for(uint smpl = 0; smpl < SAMPLE_COUNT; ++smpl){

		vec2 u = hammersley(smpl, SAMPLE_COUNT); 
		
		vec3 L = cosineSampleHemisphere(u); 

		vec3 sampleVec = outOnbSpace(nonb, L);
		irradiance += texture(envmapSampler, sampleVec).rgb;
	}
	
	irradiance = irradiance * (1.0 / float(SAMPLE_COUNT)) * PI;
  
	return irradiance; 
}                                                                                                                          
                 

void main() 
{
	const vec2 pixelCenter = vec2(gl_GlobalInvocationID.xy) + vec2(0.5);
	const vec2 inUV        = pixelCenter / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
	vec2       d           = inUV * 2.0 - 1.0;

	vec4 target    = projInv * vec4(d.x, d.y, 1, 1);
	vec4 direction = viewInv * vec4(normalize(target.xyz), 0);

	vec3 accumColor = envmapColorConvolution(direction.xyz);

	imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(accumColor, 1.0));	
}
