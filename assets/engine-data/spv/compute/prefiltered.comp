#include "random.glsl"

layout(local_size_x = 32) in;               
layout(local_size_y = 32) in;

layout(push_constant) uniform PC {
	mat4 viewInv;
	mat4 projInv;
	int width;
	int height;
};

layout(set = 0, binding = 0, rgba32f) uniform image2D image;
layout(set = 1, binding = 0) uniform samplerCube envmapSampler;

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{	
	float a = roughness * roughness;

	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	// from spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	// from tangent-space H vector to world-space sample vector
	vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}      

vec3 envmapColorFiltering(vec3 dir, float roughness)
{
    vec3 N = normalize(dir);    
    vec3 R = N;
    vec3 V = R;

    const uint SAMPLE_COUNT = 4096u;
    float totalWeight = 0.0;   
    vec3 prefilteredColor = vec3(0.0);     
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = hammersley(i, SAMPLE_COUNT);
        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0)
        {
            prefilteredColor += texture(envmapSampler, L).rgb * NdotL;
            totalWeight      += NdotL;
        }
    }
    prefilteredColor = prefilteredColor / totalWeight;

    return prefilteredColor;
}

void main() 
{
    if(gl_GlobalInvocationID.x > width || 
	   gl_GlobalInvocationID.y > height) {
		return;
    }

	float roughness = projInv[3][3];
	mat4 _projInv = projInv;
	_projInv[3][3] = 1.f;
							// gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
	const vec2 pixelCenter = vec2(gl_GlobalInvocationID.xy) + vec2(0.5);
	const vec2 inUV        = pixelCenter / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
	vec2       d           = inUV * 2.0 - 1.0;

	vec4 target    = _projInv * vec4(d.x, d.y, 1, 1);
	vec4 direction = viewInv * vec4(normalize(target.xyz), 0);

	vec3 accumColor = envmapColorFiltering(direction.xyz, roughness);

	imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(accumColor, 1.0));	
}
