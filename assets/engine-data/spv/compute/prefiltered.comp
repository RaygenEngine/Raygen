#version 460
#extension GL_GOOGLE_include_directive : enable

#include "global.glsl"
#include "hammersley.glsl"
#include "bsdfs.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

layout(push_constant) uniform PC {
	int mip;
	int samples;
};

layout(set = 0, binding = 0, rgba32f) uniform imageCube prefilteredCube[10];
layout(set = 1, binding = 0) uniform UBO_Reflprobe { Reflprobe rp; };
layout(set = 2, binding = 0) uniform samplerCube envmapSampler;

mat4 lookAtRH(vec3 eye, vec3 center, vec3 up)
{
	vec3 f = normalize(center - eye);
	vec3 s = normalize(cross(f, up));
	vec3 u = cross(s, f);

	mat4 Result = mat4(1);
	Result[0][0] = s.x;
	Result[1][0] = s.y;
	Result[2][0] = s.z;
	Result[0][1] = u.x;
	Result[1][1] = u.y;
	Result[2][1] = u.z;
	Result[0][2] =-f.x;
	Result[1][2] =-f.y;
	Result[2][2] =-f.z;
	Result[3][0] =-dot(s, eye);
	Result[3][1] =-dot(u, eye);
	Result[3][2] = dot(f, eye);
	return Result;
}

mat4 perspectiveRH_ZO(float fovy, float aspect, float zNear, float zFar)
{
	float tanHalfFovy = tan(fovy / 2.f);

	mat4 Result = mat4(0);
	Result[0][0] = 1.f / (aspect * tanHalfFovy);
	Result[1][1] = 1.f / (tanHalfFovy);
	Result[2][2] = zFar / (zNear - zFar);
	Result[2][3] = -1.f;
	Result[3][2] = -(zFar * zNear) / (zFar - zNear);
	return Result;
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{	
	float a = roughness * roughness;

	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	// from spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	// from tangent-space H vector to world-space sample vector
	vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}      

vec3 envmapColorConvolution(vec3 dir, float roughness)
{
    vec3 N = normalize(dir);    
    vec3 R = N;
    vec3 V = R;

    const uint SAMPLE_COUNT = 1024u;
    float totalWeight = 0.0;   
    vec3 prefilteredColor = vec3(0.0);     
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = hammersley(i, SAMPLE_COUNT);
        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0)
        {
            prefilteredColor += texture(envmapSampler, L).rgb * NdotL;
            totalWeight      += NdotL;
        }
    }
    prefilteredColor = prefilteredColor / totalWeight;

    return prefilteredColor;
}

void main() 
{
	// PERF:
	mat4 projInverse = inverse(perspectiveRH_ZO(1.5708f, 1.f, 1.f, 25.f));
	projInverse[1][1] *= -1;

	// PERF:
	mat4 viewInverses[] = {
		inverse(lookAtRH(vec3(0.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0))),   // right
		inverse(lookAtRH(vec3(0.0, 0.0, 0.0), vec3(-1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0))),  // left
		inverse(lookAtRH(vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))),   // up
		inverse(lookAtRH(vec3(0.0, 0.0, 0.0), vec3(0.0, -1.0, 0.0), vec3(0.0, 0.0, -1.0))), // down
		inverse(lookAtRH(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0))),  // front
		inverse(lookAtRH(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))),   // back
	};


	// for each face
	for (int f = 0; f < 6; ++f) {

								// gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
		const vec2 pixelCenter = vec2(gl_GlobalInvocationID.xy) + vec2(0.5);
		const vec2 inUV        = pixelCenter / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
		vec2       d           = inUV * 2.0 - 1.0;

		vec4 target    = projInverse * vec4(d.x, d.y, 1, 1);
		vec4 direction = viewInverses[f] * vec4(normalize(target.xyz), 0);

		float roughness = float(mip) / float(rp.lodCount - 1);

		vec3 accumColor = envmapColorConvolution(direction.xyz, roughness);

		imageStore(prefilteredCube[mip], ivec3(gl_GlobalInvocationID.xy, f), vec4(accumColor, 1.0));
	}
}
